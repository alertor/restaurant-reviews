service: RestaurantReviews

plugins:
  modules:
    - serverless-cf-vars
    - serverless-appsync-plugin
    - aws-amplify-serverless-plugin

provider:
  name: aws
  region: ${opt:region, "us-east-1"}
  runtime: nodejs8.10
  stage: ${opt:stage, "dev"}

  environmen:
    GRAPHQL_API: { Fn::GetAtt: [ GraphQlApi, GraphQLUrl ]}

custom:
  api: ${self:provider.stage}${self:service}

  appSync:
    authenticatioNType: AWS_IAM
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [ AppSyncLoggingServiceRole, Arn ]}
      level: ALL
    mappingTemplateLocation: mapping-templates
    schema: schema.graphql
    mappingTemplates:
      - field: locations
        type: User
        dataSource: NoSQL
        request: User-locations-request.vtl
        response: User-locations-response.vtl
      - field: favorites
        type: User
        dataSource: NoSQL
        request: User-favorites-request.vtl
        response: User-favorites-response.vtl
      - field: reviews
        type: User
        dataSource: NoSQL
        request: User-reviews-request.vtl
        response: User-reviews-response.vtl
      - field: me
        type: Query
        dataSource: NoSQL
        request: Query-me-request.vtl
        response: Query-me-response.vtl
      - field: findLocation
        type: Query
        dataSource: NoSQL
        request: Query-findLocation-request.vtl
        response: Query-findLocation-response.vtl
      - field: addLocation
        type: Mutation
        dataSource: NoSQL
        request: Query-addLocation-request.vtl
        response: Query-addLocation-response.vtl
      - field: addReview
        type: Mutation
        dataSource: NoSQL
        request: Query-addReview-request.vtl
        response: Query-addReview-response.vtl
      - field: markFavorite
        type: Mutation
        dataSource: NoSQL
        request: Query-markFavorite-request.vtl
        response: Query-markFavorite-response.vtl
    dataSources:
      - name: NoSQL
        type: AMAZON_DYNAMODB
        config:
          tableName: { Ref: DataTable }
          iamRoleStatements:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                Fn::Join:
                  - ""
                  - - "Ref": "DataTable"
                    - "*"

resources:
  Resources:
    # -------------------------------------------------------------------------
    # BEGIN: AUTHENTICATION
    # -------------------------------------------------------------------------
    CognitoUserPoolUsers:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.api}
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireUppercase: false
            RequireNumbers: false
            RequireSymbols: false
        AutoVerifiedAttributes: [ "email" ]
        MfaConfiguration: OFF

    AndroidUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.api}-android
        GenerateSecret: true
        UserPoolId: { Ref: CognitoUserPoolUsers }

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.api}-web
        GenerateSecret: false
        UserPoolId: { Ref: CognitoUserPoolUsers }

    AuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.api}-auth
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                ForAnyValue:StringLike:
                  "cognito-identity.amazon.com:amr": "authenticated"

    UnAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.api}-unauth
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                ForAnyValue:StringLike:
                  "cognito-identity.amazon.com:amr": "unauthenticated"

    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.api}
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId: { Ref: AndroidUserPoolClient }
            ProviderName: { Fn::Sub: [ 'cognito-idp.${self:provider.region}.amazonaws.com/#{client}', { "client": { Ref: CognitoUserPoolUsers }}]}
          - ClientId: { Ref: WebUserPoolClient }
            ProviderName: { Fn::Sub: [ 'cognito-idp.${self:provider.region}.amazonaws.com/#{client}', { "client": { Ref: CognitoUserPoolUsers }}]}

    IdentityPoolRoleMap:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: { Ref: IdentityPool }
        Roles:
          unauthenticated: { Fn::GetAtt: [ UnAuthRole, Arn ]}
          authenticated: { Fn::GetAtt: [ AuthRole, Arn ]}
    # -------------------------------------------------------------------------
    # END: AUTHENTICATION
    # -------------------------------------------------------------------------

    # -------------------------------------------------------------------------
    # BEGIN: DATA STORES
    # -------------------------------------------------------------------------
    DataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.api}-data
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "type"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
          - AttributeName: "type"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

