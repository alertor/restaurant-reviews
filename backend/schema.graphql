input PagingRequest {
    limit: Int
    nextToken: String
}

type S3Object {
    bucket: String
    key: String
    region: String
    url: AWSURL
    uploadUrl: AWSURL
}

type User {
    id: ID!
    lastUpdated: AWSDateTime
    name: String
    profilePicture: S3Object
    locations(paging: PagingRequest): LocationPagingConnection
    reviews(paging: PagingRequest): ReviewPagingConnection
    favorites(paging: PagingRequest): LocationPagingConnection
}

type GPS {
    lon: Float
    lat: Float
}

input GPSInput {
    lon: Float!
    lat: Float!
}

type Address {
    street: String
    city: String
    state: String
    zipcode: String
}

type Location {
    id: ID!
    owner: User!
    name: String!
    gps: GPS
    address: Address
    phone: String
    email: String
    favoriteCount: Int
    averageRating: Float
    reviews(paging: PagingRequest): ReviewPagingConnection
}

type Review {
    id: ID!
    user: User!
    location: Location!
    content: String
    rating: Int
}

type UserPagingConnection {
    items: [User]
    nextToken: String
}

type LocationPagingConnection {
    totalCount: Int
    items: [Location]
    nextToken: String
}

type ReviewPagingConnection {
    totalCount: Int
    items: [Review]
    nextToken: String
}

input GPSQueryInput {
    gps: GPSInput!
    radius: Float!
}

input AddressInput {
    street: String
    city: String
    state: String
    zipcode: String
}

input LocationInput {
    name: String!
    gps: GPSInput
    address: AddressInput
    phone: String
    email: String
}

input ReviewInput {
    content: String
    rating: Int
}

input UserInput {
    name: String
}

type Query {
    me: User!
    getLocation(locationId: ID!): Location
    findLocation(byGPS: GPSQueryInput, byAddress: AddressInput, query: String, paging: PagingRequest): LocationPagingConnection
}

type Mutation {
    addLocation(location: LocationInput!): Location
    addReview(locationId: ID!, review: ReviewInput!): Review
    markFavorite(locationId: ID!): Location
    updateUser(userInfo: UserInput!): User!
}

type Subscription {
    updateLocation(locationId: ID!): Location
    @aws_subscribe(mutations: [ "markFavorite" ])
    addReviewForLocation(locationId: ID!): Review
    @aws_subscribe(mutations: [ "addReview" ])
}

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
